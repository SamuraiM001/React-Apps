{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\React-Apps\\\\TestYukle\\\\src\\\\pages\\\\tests\\\\testsolver.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate, useSearchParams } from \"react-router-dom\";\nimport \"./testsolver.css\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Testsolver() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [test, setTest] = useState();\n  const [answers, setAnswers] = useState([]);\n  const [result, setResult] = useState([]);\n  const [canWork, setWork] = useState(true);\n  const [isworked, setworked] = useState(1000);\n  const [totalScore, setTotalScore] = useState(1000);\n  const utis = localStorage.getItem(\"UTIS\");\n  const classs = localStorage.getItem(\"class\");\n  useEffect(() => {\n    const fetchData = async () => {\n      // try {\n      //     const response = await fetch(\n      //         \"http://localhost:8000/isvalid/\"+utis+\"/\"+ searchParams.get(\"id\")\n      //         );\n      //         if (response.status != 201) {\n      //             const data =await response.json()\n      //             setworked(data)      \n      //         }\n      //     } \n      //     catch(error){}\n      try {\n        const response = await fetch(\"http://localhost:8000/tests/\" + searchParams.get(\"id\"));\n        if (!response.ok) {\n          console.error(\"Error fetching data\");\n        } else {\n          const data = await response.json();\n          setTest(data);\n          setAnswers(Array(data.QUESTIONS.length).fill(null));\n          if (data.CLASS != classs) {\n            setWork(false);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // ...Other code...\n\n  // useEffect(() => {\n  //     if(totalScore!=1000){\n  //         const res =  fetch(\"http://localhost:8000/validate/\"+utis+\"/\"+searchParams.get(\"id\")+\"/\"+totalScore);\n  //         console.log(\"http://localhost:8000/validate/\"+utis+\"/\"+searchParams.get(\"id\")+\"/\"+totalScore);\n  //     }\n  //   }, [totalScore]);\n\n  // ...Other code...\n\n  if (!canWork) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n  if (!test && isworked) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading....\"\n    }, void 0, false);\n  }\n  if (isworked != 1000) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Bu testi yerin\\u0259 yetirmisiniz.Ald\\u0131\\u011F\\u0131n\\u0131z bal : \", isworked]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: test.TESTNAME\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Suallar:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), test.QUESTIONS.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [question.QUESTION, \"  ( S\\u0259viyy\\u0259: \", question.SCORE, \" )\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), \"D\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answers\",\n        children: question.ANSWERS.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `answer disabled`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: question.TYPE === \"multiAnswered\" ? \"checkbox\" : \"radio\",\n            name: `question-${questionIndex}`,\n            id: `question-${questionIndex}-answer-${answerIndex}`,\n            checked: answers[questionIndex] === answerIndex,\n            onChange: () => {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `question-${questionIndex}-answer-${answerIndex}`,\n            children: answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, answerIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, questionIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Testsolver, \"kKWjMXVxo5zWvA/WUrTKjRt9ZZs=\", false, function () {\n  return [useSearchParams];\n});\n_c = Testsolver;\nexport default Testsolver;\nvar _c;\n$RefreshReg$(_c, \"Testsolver\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useSearchParams","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Testsolver","_s","searchParams","test","setTest","answers","setAnswers","result","setResult","canWork","setWork","isworked","setworked","totalScore","setTotalScore","utis","localStorage","getItem","classs","fetchData","response","fetch","get","ok","console","error","data","json","Array","QUESTIONS","length","fill","CLASS","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","TESTNAME","map","question","questionIndex","QUESTION","SCORE","ANSWERS","answer","answerIndex","type","TYPE","name","id","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/React-Apps/TestYukle/src/pages/tests/testsolver.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Navigate, useSearchParams } from \"react-router-dom\";\r\nimport \"./testsolver.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Testsolver() {\r\n  const [searchParams] = useSearchParams();\r\n  const [test, setTest] = useState();\r\n  const [answers, setAnswers] = useState([]);\r\n  const [result, setResult] = useState([]);\r\n  const [canWork,setWork] = useState(true)\r\n  const [isworked,setworked] = useState(1000)\r\n  const [totalScore, setTotalScore] = useState(1000);\r\n  const utis = localStorage.getItem(\"UTIS\")\r\n  const classs = localStorage.getItem(\"class\")\r\n\r\n  useEffect(() => {\r\n      const fetchData = async () => {\r\n        // try {\r\n        //     const response = await fetch(\r\n        //         \"http://localhost:8000/isvalid/\"+utis+\"/\"+ searchParams.get(\"id\")\r\n        //         );\r\n        //         if (response.status != 201) {\r\n        //             const data =await response.json()\r\n        //             setworked(data)      \r\n        //         }\r\n        //     } \r\n        //     catch(error){}\r\n          try {\r\n              const response = await fetch(\r\n                  \"http://localhost:8000/tests/\" + searchParams.get(\"id\")\r\n                  );\r\n                  if (!response.ok) {\r\n                      console.error(\"Error fetching data\");\r\n                    } else {\r\n                        const data = await response.json();\r\n                        setTest(data);\r\n                        setAnswers(Array(data.QUESTIONS.length).fill(null));\r\n                        if(data.CLASS != classs){\r\n                            setWork(false)\r\n                        }\r\n                        \r\n \r\n            }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nfetchData();\r\n}, []);\r\n\r\n\r\n\r\n  // ...Other code...\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     if(totalScore!=1000){\r\n//         const res =  fetch(\"http://localhost:8000/validate/\"+utis+\"/\"+searchParams.get(\"id\")+\"/\"+totalScore);\r\n//         console.log(\"http://localhost:8000/validate/\"+utis+\"/\"+searchParams.get(\"id\")+\"/\"+totalScore);\r\n//     }\r\n//   }, [totalScore]);\r\n  \r\n  // ...Other code...\r\n  \r\n  \r\n  if(!canWork){\r\n    return <Navigate to=\"/\"/>\r\n  }\r\n\r\n  if (!test && isworked) {\r\n    return <>Loading....</>;\r\n  }\r\n  if (isworked !=1000) {\r\n    return <>Bu testi yerinə yetirmisiniz.Aldığınız bal : {isworked}</>;\r\n  }\r\n    return (\r\n    <div className=\"container\">\r\n      <h2>{test.TESTNAME}</h2>\r\n      <h3>Suallar:</h3>\r\n\r\n      {test.QUESTIONS.map((question, questionIndex) => (\r\n        <div key={questionIndex} className=\"question\">\r\n          <p>{question.QUESTION}  ( Səviyyə: {question.SCORE} )</p>\r\n          D\r\n          <ul className=\"answers\">\r\n            {question.ANSWERS.map((answer, answerIndex) => (\r\n              <li\r\n                key={answerIndex}\r\n                className={`answer disabled`}\r\n              >\r\n                <input\r\n                  type={question.TYPE === \"multiAnswered\" ? \"checkbox\" : \"radio\"}\r\n                  name={`question-${questionIndex}`}\r\n                  id={`question-${questionIndex}-answer-${answerIndex}`}\r\n                  checked={answers[questionIndex] === answerIndex}\r\n                  onChange={() => {}}\r\n                />\r\n                <label htmlFor={`question-${questionIndex}-answer-${answerIndex}`}>\r\n                  {answer}\r\n                </label>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Testsolver;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
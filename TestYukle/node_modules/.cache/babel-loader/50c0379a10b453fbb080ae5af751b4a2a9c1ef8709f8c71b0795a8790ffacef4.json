{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\React-Apps\\\\TestYukle\\\\src\\\\pages\\\\tests\\\\testsolver.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate, useSearchParams } from \"react-router-dom\";\nimport \"./testsolver.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Testsolver() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const [test, setTest] = useState();\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [canWork, setWork] = useState(true);\n  const classs = localStorage.getItem(\"Name\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/tests/\" + searchParams.get(\"id\"));\n        if (!response.ok) {\n          console.error(\"Error fetching data\");\n        } else {\n          const data = await response.json();\n          setTest(data);\n          setSelectedAnswers(Array(data.QUESTIONS.length).fill(\"\"));\n          if (localStorage.getItem(\"login\") !== \"TEACHER\" && data.Author !== classs) {\n            setWork(false);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n  if (!canWork) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  if (!test) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Loading....\"\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: test.TESTNAME\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Suallar:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), test.QUESTIONS.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [question.QUESTION, \" ( S\\u0259viyy\\u0259: \", question.SCORE, \" )\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"D\\xFCzg\\xFCn Cavablar:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answers\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `answer disabled`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            checked: selectedAnswers[questionIndex] === question.ANSWERS\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `question-${questionIndex}-answer-${answerIndex}`,\n            children: question.ANSWERS\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, questionIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Testsolver, \"Z5zx9P+Yrx0/IPfMCbCAK6Zx5/c=\", false, function () {\n  return [useSearchParams];\n});\n_c = Testsolver;\nexport default Testsolver;\nvar _c;\n$RefreshReg$(_c, \"Testsolver\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useSearchParams","jsxDEV","_jsxDEV","Fragment","_Fragment","Testsolver","_s","searchParams","test","setTest","selectedAnswers","setSelectedAnswers","canWork","setWork","classs","localStorage","getItem","fetchData","response","fetch","get","ok","console","error","data","json","Array","QUESTIONS","length","fill","Author","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","TESTNAME","map","question","questionIndex","QUESTION","SCORE","checked","ANSWERS","htmlFor","answerIndex","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/React-Apps/TestYukle/src/pages/tests/testsolver.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Navigate, useSearchParams } from \"react-router-dom\";\r\nimport \"./testsolver.css\";\r\n\r\nfunction Testsolver() {\r\n  const [searchParams] = useSearchParams();\r\n  const [test, setTest] = useState();\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [canWork, setWork] = useState(true);\r\n  const classs = localStorage.getItem(\"Name\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:8000/tests/\" + searchParams.get(\"id\")\r\n        );\r\n        if (!response.ok) {\r\n          console.error(\"Error fetching data\");\r\n        } else {\r\n          const data = await response.json();\r\n          setTest(data);\r\n          setSelectedAnswers(Array(data.QUESTIONS.length).fill(\"\"));\r\n          if (localStorage.getItem(\"login\") !== \"TEACHER\" && data.Author !== classs) {\r\n            setWork(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!canWork) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  if (!test) {\r\n    return <>Loading....</>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{test.TESTNAME}</h2>\r\n      <h3>Suallar:</h3>\r\n\r\n      {test.QUESTIONS.map((question, questionIndex) => (\r\n        <div key={questionIndex} className=\"question\">\r\n          <p>\r\n            {question.QUESTION} ( Səviyyə: {question.SCORE} )\r\n          </p>\r\n          <h4>Düzgün Cavablar:</h4>\r\n          <ul className=\"answers\">\r\n              <li  className={`answer disabled`}>\r\n                <input\r\n                  checked={selectedAnswers[questionIndex] === question.ANSWERS}\r\n                />\r\n                <label htmlFor={`question-${questionIndex}-answer-${answerIndex}`}>\r\n                  {question.ANSWERS}\r\n                </label>\r\n              </li>\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Testsolver;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}